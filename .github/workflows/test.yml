name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  RUST_VERSION: 1.85
  NODE_VERSION: 20

jobs:
  # Dockerを使用したテスト（メイン）
  docker-test:
    name: Docker Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cleanup Docker disk usage
        run: |
          docker system df
          docker builder prune -af || true
          docker system prune -af || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build test image
        run: |
          docker compose -f docker-compose.test.yml build test-runner

      - name: Build rust-test image (multi-node P2P)
        run: |
          docker compose -f docker-compose.test.yml build rust-test

      - name: Run all tests
        run: |
          docker compose -f docker-compose.test.yml run --rm test-runner /app/run-tests.sh

      - name: Run Rust tests in Docker (multi-node P2P)
        run: |
          docker compose -f docker-compose.test.yml run --rm rust-test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

  # ネイティブ環境でのテスト（Linux）
  native-test-linux:
    name: Native Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsqlite3-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            kukuri-tauri/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            kukuri-tauri/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          cd kukuri-tauri
          pnpm install --frozen-lockfile

      - name: Run Rust tests
        run: |
          cd kukuri-tauri/src-tauri
          cargo test --workspace --all-features

      - name: Run Rust clippy
        run: |
          cd kukuri-tauri/src-tauri
          cargo clippy --workspace --all-features -- -D warnings -A dead_code -A unused_variables

      - name: Run TypeScript tests
        run: |
          cd kukuri-tauri
          pnpm test

      - name: Run TypeScript type check
        run: |
          cd kukuri-tauri
          pnpm type-check

      - name: Run ESLint
        run: |
          cd kukuri-tauri
          pnpm lint

  # フォーマットチェック（別ジョブ）
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install frontend dependencies
        run: |
          cd kukuri-tauri
          pnpm install --frozen-lockfile

      - name: Check Rust formatting
        run: |
          cd kukuri-tauri/src-tauri
          cargo fmt -- --check

      - name: Check TypeScript formatting
        run: |
          cd kukuri-tauri
          pnpm format:check

  # Windows環境でのビルドテスト（Dockerは使用しない）
  build-test-windows:
    name: Build Test (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install dependencies
        run: |
          cd kukuri-tauri
          pnpm install --frozen-lockfile

      - name: Build check (Rust)
        run: |
          cd kukuri-tauri/src-tauri
          cargo check --workspace --all-features

      - name: Build check (TypeScript)
        run: |
          cd kukuri-tauri
          pnpm type-check

  # テスト結果のサマリー
  test-summary:
    name: Test Summary
    needs: [docker-test, native-test-linux, format-check, build-test-windows]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.docker-test.result }}" == "failure" ]] || \
             [[ "${{ needs.native-test-linux.result }}" == "failure" ]] || \
             [[ "${{ needs.format-check.result }}" == "failure" ]] || \
             [[ "${{ needs.build-test-windows.result }}" == "failure" ]]; then
            echo "Some tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi
